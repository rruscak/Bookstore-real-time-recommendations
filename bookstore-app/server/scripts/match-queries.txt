MATCH (b1:Book)
WHERE id(b1) = 28
MATCH path = ((b1)-[rel:HAS_SEQUEL|:WRITER_OF|:HAS_CATEGORY|:HAS_KEYWORD|:PUBLISHER_OF*..5]-(b2:Book))
WHERE b2 != b1
RETURN DISTINCT b2.title, length(path) AS relsInCommon
ORDER BY relsInCommon ASC, b2.title
LIMIT 5


// RECOMMENDATIONS --------------------------------------------------------------------------------------------------------------------------------------------
// 1 - RETURN Books with most relations to another one -  ONLY THE FROM THE SAME CATEGORY
MATCH (b1:Book)-[:HAS_CATEGORY]->(cat1:Category)
WHERE id(b1) = 28
MATCH p = (b1)-[:HAS_SEQUEL|WRITER_OF|HAS_KEYWORD*..3]-(b2:Book)-[:HAS_CATEGORY]->(cat2:Category)
WHERE b2 <> b1 AND cat1 = cat2
WITH b2, relationships(p) AS rel
OPTIONAL MATCH (b2)-[:HAS_IMAGE]->(i:Image)
OPTIONAL MATCH (b2)<-[:WRITER_OF]-(w:Writer)
OPTIONAL MATCH (:User)-[ratRel:RATED]->(b2)
WITH b2, i, w, avg(ratRel.rating) AS rating, count(rel) AS relsInCommon
RETURN {id: id(b2), title: b2.title, writer: w.name, price: b2.price, rating: rating, image: collect(DISTINCT i), relsInCommon: relsInCommon} AS book
ORDER BY book.relsInCommon DESC, book.title
LIMIT 10

// 2a - RECOMEND simmilar books to an books WITHOUT books user already bought or has in cart
MATCH (user:User)
WHERE id(user) = 57
WITH user
MATCH (b1:Book)
WHERE id(b1) = 28
MATCH p = (b1)-[:HAS_SEQUEL|WRITER_OF|HAS_CATEGORY|HAS_KEYWORD*..3]-(b2:Book)
WHERE NOT (user)-[:HAS_IN_CART]->(b2) AND b2 <> b1 
WITH b2, relationships(p) AS rel
OPTIONAL MATCH (b2)-[:HAS_IMAGE]->(i:Image)
OPTIONAL MATCH (b2)<-[:WRITER_OF]-(w:Writer)
OPTIONAL MATCH (:User)-[ratRel:RATED]->(b2)
WITH b2, i, w, avg(ratRel.rating) AS rating, count(rel) AS relsInCommon
RETURN {id: id(b2), title: b2.title, writer: w.name, price: b2.price, rating: rating, image: collect(DISTINCT i), relsInCommon: relsInCommon} AS book
ORDER BY book.relsInCommon DESC, book.title
LIMIT 10

// 2b - RECOMEND simmilar books to an books WITHOUT books user already bought or has in cart  -  ONLY THE FROM THE SAME CATEGORY
MATCH (user:User)
WHERE id(user) = 52
WITH user
MATCH (b1:Book)-[:HAS_CATEGORY]->(cat1:Category)
WHERE id(b1) = 28
MATCH p = (b1)-[:HAS_SEQUEL|WRITER_OF|HAS_KEYWORD*..3]-(b2:Book)-[:HAS_CATEGORY]->(cat2:Category)
WHERE NOT (user)-[:HAS_IN_CART]->(b2) AND b2 <> b1 AND cat1 = cat2
WITH b2, relationships(p) AS rel
OPTIONAL MATCH (b2)-[:HAS_IMAGE]->(i:Image)
OPTIONAL MATCH (b2)<-[:WRITER_OF]-(w:Writer)
OPTIONAL MATCH (:User)-[ratRel:RATED]->(b2)
WITH b2, i, w, avg(ratRel.rating) AS rating, count(rel) AS relsInCommon
RETURN {id: id(b2), title: b2.title, writer: w.name, price: b2.price, rating: rating, image: collect(DISTINCT i), relsInCommon: relsInCommon} AS book
ORDER BY book.relsInCommon DESC, book.title
LIMIT 10


// ORDERS -----------------------------------------------------------------------------------------------------------------------------------------------------
// create Order
MATCH (user:User)-[cartRel:HAS_IN_CART]->(b:Book)
WHERE id(user) = 52
WITH user, cartRel, b
WITH count(b) AS totalItems, order, user, orderRel, conRel, b
WITH totalItems, order, user, orderRel, conRel, b, sum(b.price * totalItems) AS sum
SET order.created = datetime(), order.totalItems = totalItems, order.subtotal = sum
CREATE (user)-[orderRel:HAS_ORDER]->(order:Order)-[conRel:CONTAINS]->(b)
RETURN user, orderRel, order, conRel, b

// Find user orders
MATCH (user:User)-[rel:HAS_ORDER]-(n:Order)-[]-(m)
WHERE id(user) = 30
RETURN user, rel, n, m
// MATCH items in cart
MATCH (user:User)-[rel:HAS_IN_CART]-(n:Book)
WHERE id(user) = 30
RETURN user, rel, n
// delete order
match (user:User)-[rel:HAS_ORDER]-(n:Order)
WHERE id(user) = 30
DETACH DELETE n

// Add to Shopping Cart
MATCH (u:User)
WHERE id(u) = 30
WITH u
MATCH (b:Book)
WHERE id(b) = 42
MERGE (u)-[rel:HAS_IN_CART]->(b)
ON CREATE SET rel.created = datetime()
SET rel.quantity = 2
RETURN u, rel, b
// Add to Shopping Cart
MATCH (u:User)
WHERE id(u) = 30
WITH u
MATCH (b:Book)
WHERE id(b) = 31
MERGE (u)-[rel:HAS_IN_CART]->(b)
ON CREATE SET rel.created = datetime()
SET rel.quantity = 2
RETURN u, rel, b


// PRESENTATION QUERIES - -------------------------------------------------------------------------------------------------------------------------------------
call db.schema()

// Books has in common
MATCH (b1:Book)
WHERE id(b1) = 28
MATCH path = allShortestPaths((b1)-[rel:HAS_SEQUEL|WRITER_OF|HAS_CATEGORY|HAS_KEYWORD|PUBLISHER_OF*..10]-(b2:Book))
WHERE b2 <> b1
RETURN path, length(path) AS path_length

// Two books in common
WHERE id(b1) = 28
WITH b1
MATCH (b2:Book)
WHERE id(b2) = 30
MATCH path = (b1)-[rel:HAS_SEQUEL|WRITER_OF|HAS_CATEGORY|HAS_KEYWORD|PUBLISHER_OF*..4]-(b2)
RETURN path, length(path) AS path_length


// predicate if user already bought the book
RETURN ...,
	EXISTS(()-[]->()) AS hasBought
	
	
// CREATE ORDER QUERIES - -------------------------------------------------------------------------------------------------------------------------------------
// create Order
MATCH (user:User)-[:HAS_IN_CART]-(:Book)
WHERE id(user) = 30
CREATE (user)-[orderRel:HAS_ORDER]->(order:Order{created: datetime()})
WITH user, order
MATCH (user)-[cartRel:HAS_IN_CART]->(b:Book)
CREATE (order)-[containsRel:CONTAINS]->(b)
SET containsRel = cartRel, containsRel.purchasePrice = b.price
MERGE (user)-[boughtRel:BOUGHT]->(b)
DELETE cartRel
WITH order, sum(b.price * containsRel.quantity) AS subtotal
SET order.subtotal = subtotal

//
MATCH (user:User)-[cartRel:HAS_IN_CART]->(b:Book)
WHERE id(user) = 52
WITH user, b, count(b) AS totalItems, collect(b) AS books, 0 AS total
WITH totalItems, user, b, foreach(n in users| total+= n.price) as subtotal

CREATE (user)-[orderRel:HAS_ORDER]->(order:Order)-[conRel:CONTAINS]->(books)
SET order.created = datetime(), order.totalItems = totalItems, order.subtotal = subtotal
RETURN user, orderRel, order, conRel, b

//
MATCH (user:User)-[cartRel:HAS_IN_CART]->(b:Book)
WHERE id(user) = 30
WITH sum(b.price * cartRel.quantity) AS subtotal
RETURN subtotal
